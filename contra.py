TOKEN='Tsk_4c33a762c7c24e7397e98d3229585476'
token='pk_a88a2d8fbbbc485bbec0b39929a980fa'
ALPHA='9QDS9XU0NI6GNIZO'

import numpy as np
import matplotlib.pyplot as plt
import matplotlib, multiprocessing, threading
import math, time, concurrent.futures, random
import operator as op
from collections import Counter
import json, pickle


# start_time = time.time()

def pickleLoader(pklFile):
    try:
        while True:
            yield pickle.load(pklFile)
    except EOFError:
        pass

# planet=[[0.78, 105.39, 37.96, 0.99, 'ascendent', 4, 7], [-0.16, 111.89, -9.23, 1.0, 'descendent', 7, 8], [-1.39, 121.71, -54.27, 1.0, 'descendent', 8, 9], [1.45, 96.25, 55.36, 0.99, 'ascendent', 9, 11], [-0.78, 120.73, -37.87, 0.97, 'descendent', 11, 13], [0.84, 98.86, 40.14, 0.95, 'ascendent', 13, 28], [-1.29, 159.39, -52.26, 0.95, 'descendent', 28, 36], [1.92, 43.33, 62.51, 0.99, 'ascendent', 36, 39], [-0.64, 146.81, -32.45, 0.95, 'descendent', 39, 80], [3.5, -183.99, 74.08, 1.0, 'ascendent', 80, 81], [0.46, 63.06, 24.47, 1.0, 'ascendent', 81, 82], [-0.89, 173.76, -41.83, 1.0, 'descendent', 82, 83], [-4.49, 472.19, -77.45, 1.0, 'descendent', 83, 84], [-1.53, 223.46, -56.82, 1.0, 'descendent', 84, 85], [2.39, -109.69, 67.3, 1.0, 'ascendent', 85, 86], [0.21, 77.78, 11.86, 1.0, 'ascendent', 86, 87], [-0.89, 173.92, -41.83, 1.0, 'descendent', 87, 88], [0.3, 68.76, 16.7, 1.0, 'ascendent', 88, 89], [0.8, 24.26, 38.66, 1.0, 'ascendent', 89, 90], [0.4, 57.24, 21.62, 0.95, 'ascendent', 90, 138], [-0.85, 228.47, -40.2, 1.0, 'descendent', 138, 139], [-3.07, 537.75, -71.96, 1.0, 'descendent', 139, 140], [-0.56, 185.98, -29.15, 0.98, 'descendent', 140, 146], [-7.41, 1186.46, -82.31, 1.0, 'descendent', 146, 147], [-1.79, 360.55, -60.81, 0.96, 'descendent', 147, 149], [-0.38, 149.49, -20.56, 1.0, 'descendent', 149, 150], [1.47, -127.26, 55.77, 1.0, 'ascendent', 150, 151], [0.15, 72.06, 8.53, 1.0, 'ascendent', 151, 152], [-1.1, 262.69, -47.86, 0.96, 'descendent', 152, 154], [0.53, 11.03, 27.92, 1.0, 'ascendent', 154, 155], [-0.34, 145.88, -18.78, 1.0, 'descendent', 155, 156], [0.17, 65.54, 9.93, 1.0, 'ascendent', 156, 157], [-1.89, 389.74, -62.12, 1.0, 'descendent', 157, 158], [0.8, -35.88, 38.75, 0.96, 'ascendent', 158, 170], [-0.67, 214.36, -34.02, 1.0, 'descendent', 170, 171], [-1.7, 389.64, -59.53, 1.0, 'descendent', 171, 172], [0.62, -10.26, 32.01, 1.0, 'ascendent', 172, 173], [1.86, -223.92, 61.74, 1.0, 'ascendent', 173, 174], [-0.41, 170.94, -22.16, 0.96, 'descendent', 174, 185], [0.61, -16.78, 31.26, 1.0, 'ascendent', 185, 186], [-0.35, 161.22, -19.29, 1.0, 'descendent', 186, 187], [-1.75, 422.43, -60.22, 0.99, 'descendent', 187, 189], [0.44, 9.86, 23.74, 0.96, 'ascendent', 189, 206], [-0.95, 296.34, -43.64, 0.98, 'descendent', 206, 209], [6.36, -1231.0, 81.06, 1.0, 'ascendent', 209, 210], [0.5, -2.78, 26.79, 0.95, 'ascendent', 210, 221], [-0.28, 170.27, -15.64, 1.0, 'descendent', 221, 222], [0.8, -70.63, 38.83, 0.99, 'ascendent', 222, 224], [-0.86, 303.48, -40.86, 1.0, 'descendent', 224, 225], [0.45, 6.48, 24.47, 1.0, 'ascendent', 225, 226], [-0.42, 203.71, -22.66, 0.97, 'descendent', 226, 228], [0.45, 5.87, 24.23, 1.0, 'ascendent', 228, 229], [-0.54, 231.92, -28.27, 0.95, 'descendent', 229, 234], [0.11, 81.43, 5.99, 1.0, 'ascendent', 234, 236], [0.85, -93.68, 40.28, 0.95, 'ascendent', 236, 238], [0.01, 105.53, 0.57, 1.0, 'ascendent', 238, 239], [-1.75, 525.0, -60.18, 1.0, 'descendent', 239, 241], [-0.3, 176.73, -16.7, 1.0, 'descendent', 241, 242], [2.85, -585.24, 70.67, 0.96, 'ascendent', 242, 246], [-0.37, 206.1, -20.3, 1.0, 'descendent', 246, 247], [-1.4, 460.51, -54.46, 1.0, 'descendent', 247, 248], [-0.1, 138.11, -5.71, 1.0, 'descendent', 248, 249], [1.25, -199.28, 51.45, 1.0, 'ascendent', 249, 250], [-1.0, 364.37, -45.0, 0.97, 'descendent', 250, 252], [0.29, 39.39, 16.17, 1.0, 'ascendent', 252, 253], [1.27, -209.81, 51.89, 1.0, 'ascendent', 253, 254], [-1.24, 427.73, -51.0, 1.0, 'descendent', 254, 255], [-0.21, 167.62, -12.13, 1.0, 'descendent', 255, 256], [0.08, 92.1, 4.57, 1.0, 'ascendent', 256, 257], [0.81, -94.22, 38.83, 1.0, 'ascendent', 257, 258], [-0.3, 189.58, -16.44, 1.0, 'descendent', 258, 259], [0.43, 1.85, 23.27, 0.97, 'ascendent', 259, 261], [1.7, -330.97, 59.61, 1.0, 'ascendent', 261, 263], [-0.08, 138.48, -4.57, 1.0, 'descendent', 263, 264], [-0.79, 324.61, -38.13, 1.0, 'descendent', 264, 265], [1.07, -166.97, 46.94, 1.0, 'ascendent', 265, 266], [-0.34, 208.09, -18.78, 1.0, 'descendent', 266, 267], [0.52, -21.53, 27.47, 1.0, 'ascendent', 267, 268], [-2.05, 667.23, -64.0, 1.0, 'descendent', 268, 269], [1.08, -173.4, 47.07, 1.0, 'ascendent', 269, 270], [-0.26, 187.06, -14.57, 1.0, 'descendent', 270, 271], [0.77, -93.43, 37.78, 1.0, 'ascendent', 271, 272], [-0.9, 361.15, -41.83, 0.95, 'descendent', 272, 281], [0.77, -105.77, 37.42, 1.0, 'ascendent', 281, 283], [-1.15, 436.42, -49.01, 0.98, 'descendent', 283, 287], [0.42, -14.01, 22.59, 0.96, 'ascendent', 287, 384], [-0.4, 297.99, -21.78, 0.96, 'descendent', 384, 387], [-1.68, 795.33, -59.31, 1.0, 'descendent', 387, 388], [-0.12, 190.2, -7.13, 1.0, 'descendent', 388, 389], [0.14, 89.06, 7.69, 1.0, 'ascendent', 389, 390], [-0.34, 274.31, -18.78, 1.0, 'descendent', 390, 391], [0.2, 63.18, 11.31, 1.0, 'ascendent', 391, 392], [-0.35, 278.77, -19.29, 1.0, 'descendent', 392, 393], [0.78, -167.18, 38.11, 0.96, 'ascendent', 393, 397], [-0.32, 273.39, -18.0, 0.98, 'descendent', 397, 399], [0.05, 123.78, 2.86, 1.0, 'ascendent', 399, 400], [1.84, -592.06, 61.48, 0.98, 'ascendent', 400, 402], [-1.58, 784.63, -57.75, 1.0, 'descendent', 402, 403], [0.99, -255.24, 44.86, 0.95, 'ascendent', 403, 405], [3.15, -1126.75, 72.37, 1.0, 'ascendent', 405, 407], [-1.14, 618.15, -48.74, 1.0, 'descendent', 407, 408], [0.17, 85.7, 9.37, 1.0, 'ascendent', 408, 409], [2.35, -810.0, 66.99, 1.0, 'ascendent', 409, 410], [0.31, 30.49, 16.96, 1.0, 'ascendent', 410, 411], [-0.46, 344.91, -24.7, 1.0, 'descendent', 411, 412], [-3.25, 1494.39, -72.9, 1.0, 'descendent', 412, 413], [0.1, 112.9, 5.43, 1.0, 'ascendent', 413, 414], [1.07, -290.74, 46.94, 1.0, 'ascendent', 414, 415], [0.4, -12.68, 21.8, 1.0, 'ascendent', 415, 417], [-0.69, 439.75, -34.41, 1.0, 'descendent', 417, 418], [0.27, 40.56, 15.11, 1.0, 'ascendent', 418, 419], [0.09, 113.88, 5.43, 1.0, 'ascendent', 419, 421], [-0.55, 386.47, -28.92, 1.0, 'descendent', 421, 423], [1.39, -437.31, 54.37, 1.0, 'ascendent', 423, 424], [-0.22, 245.33, -12.13, 1.0, 'descendent', 424, 425], [0.64, -116.91, 32.52, 0.97, 'ascendent', 425, 427], [-0.26, 266.25, -14.57, 1.0, 'descendent', 427, 428], [-5.34, 2438.67, -79.38, 0.99, 'descendent', 428, 430], [2.0, -715.7, 63.43, 1.0, 'ascendent', 430, 431], [-0.63, 417.83, -32.21, 1.0, 'descendent', 431, 432], [-2.33, 1150.11, -66.73, 1.0, 'descendent', 432, 433], [0.01, 141.14, 0.29, 1.0, 'ascendent', 433, 434], [1.85, -659.55, 61.61, 1.0, 'ascendent', 434, 435], [0.71, -161.48, 35.18, 1.0, 'ascendent', 435, 436], [-0.57, 392.4, -29.48, 1.0, 'descendent', 436, 437], [0.47, -59.87, 25.16, 0.97, 'ascendent', 437, 440], [-1.94, 1000.43, -62.73, 1.0, 'descendent', 440, 441], [-0.25, 257.32, -14.3, 1.0, 'descendent', 441, 442], [-0.93, 555.72, -42.92, 1.0, 'descendent', 442, 443], [0.67, -150.89, 33.62, 1.0, 'ascendent', 443, 444], [-0.17, 219.85, -9.65, 1.0, 'descendent', 444, 445], [-0.44, 341.4, -23.9, 1.0, 'descendent', 445, 446], [0.7, -169.18, 34.97, 0.95, 'ascendent', 446, 461], [-2.85, 1467.34, -70.67, 1.0, 'descendent', 461, 462], [-0.71, 477.43, -35.28, 0.97, 'descendent', 462, 464], [0.08, 109.79, 4.86, 1.0, 'ascendent', 464, 465], [8.64, -3868.28, 83.4, 1.0, 'ascendent', 465, 466], [-1.84, 1015.39, -61.48, 1.0, 'descendent', 466, 467], [0.43, -44.69, 23.27, 1.0, 'ascendent', 467, 468], [1.75, -663.79, 60.29, 0.97, 'ascendent', 468, 470], [0.14, 94.25, 7.97, 1.0, 'ascendent', 470, 471], [-2.87, 1514.31, -70.82, 1.0, 'descendent', 471, 472], [0.01, 154.29, 0.37, 1.0, 'ascendent', 472, 473], [1.92, -752.2, 62.53, 1.0, 'ascendent', 473, 475], [0.16, 83.98, 9.23, 1.0, 'ascendent', 475, 476], [-1.57, 906.32, -57.43, 0.99, 'descendent', 476, 479], [2.51, -1045.77, 68.28, 1.0, 'ascendent', 479, 480], [0.66, -160.19, 33.62, 1.0, 'ascendent', 480, 481], [-0.03, 174.11, -1.72, 1.0, 'descendent', 481, 482], [0.87, -260.26, 41.04, 0.97, 'ascendent', 482, 488]]

# with open('dades.pkl','rb') as file:
# 	var=[a for a in pickleLoader(file)]

# with open('dates.pkl','rb') as file:
# 	dates=[a for a in pickleLoader(file)]
# dates=dates[0]
# print('dates',dates)
# # for term in var:
# # 	print('term',term)
# pains=[term[2] for term in var]
# # pain=[[['ascendent', 89.65, 103.74, 12, 59], ['descendent', 103.74, 95.18, 59, 90], ['ascendent', 95.18, 119.75, 90, 119], ['descendent', 119.75, 108.91, 119, 151], ['ascendent', 108.91, 133.6, 151, 179]], [['descendent', 123.82, 111.0, 356, 364], ['ascendent', 111.0, 119.75, 364, 367], ['descendent', 119.75, 95.19, 367, 418], ['ascendent', 95.19, 112.39, 418, 466], ['descendent', 112.39, 89.47, 466, 486]], [['ascendent', 89.47, 100.4, 486, 498], ['descendent', 100.4, 91.5, 498, 517], ['ascendent', 91.5, 156.65, 517, 739], ['descendent', 156.65, 142.7237, 739, 774], ['ascendent', 142.7237, 180.1, 774, 910], ['descendent', 180.1, 150.24, 910, 926], ['ascendent', 150.24, 180.24, 926, 949]], [['descendent', 180.24, 164.94, 949, 955], ['ascendent', 164.94, 178.82, 955, 972], ['descendent', 178.82, 160.63, 972, 979]], [['ascendent', 160.63, 227.35, 979, 1070], ['descendent', 227.35, 217.29, 1070, 1081], ['ascendent', 217.29, 233.47, 1081, 1089]], [['ascendent', 142.0, 215.31, 1151, 1232], ['descendent', 215.31, 170.27, 1232, 1254], ['ascendent', 170.27, 221.37, 1254, 1295], ['descendent', 221.37, 192.58, 1295, 1298], ['ascendent', 192.58, 226.42, 1298, 1325]]]
# # print('pain',pain)
# pains=[pains[0]]
# print('pains',pains)
# for obj in pains:
# 	extus=[[term[0][3],term[-1][4]] for term in obj] #principi i final de tendencies
# 	lens=[term[-1][4]-term[0][3] for term in obj] #longitud horitzontal
# 	alts=[round(term[-1][2]-term[0][1],3) for term in obj] #longitud vertical
# 	print('extus',extus)
# 	print('lens',lens)
# 	print('alts',alts)

# 	nums=extus.copy()
# 	tru=[] 
# 	for i in range(len(nums[0:-1])):
# 		if nums[i+1][0]==nums[i][1]:
# 			tru.append(True)
# 		else:
# 			tru.append(False)
# 	tru.append(False) #si els termes estan contigus en pain
# 	# print('tru',tru)
# 	misa=[] #agrupant els termes contigus
# 	ara=[]
# 	for i in range(len(nums)):
# 		if not ara:
# 			ara=[nums[i]]
# 		if tru[i]==False:
# 			if nums[i] not in ara:
# 				ara.append(nums[i])
# 			misa.append(ara)
# 			ara=[]
# 		elif tru[i]==True and nums[i] not in ara:
# 			ara.append(nums[i])
# 	print('misa',misa)
# 	print([len(term) for term in misa])